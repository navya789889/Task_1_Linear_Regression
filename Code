import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
# Sample dataset: Hours studied vs Exam score
data = {
    'Hours': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Scores': [35, 37, 50, 55, 60, 62, 70, 78, 85, 95]
}

df = pd.DataFrame(data)
df.head()
plt.scatter(df['Hours'], df['Scores'], color='blue')
plt.title('Hours Studied vs Scores')
plt.xlabel('Hours Studied')
plt.ylabel('Scores')
plt.grid(True)
plt.show()
X = df[['Hours']]  # Features (2D array)
y = df['Scores']   # Target (1D array)
model = LinearRegression()
model.fit(X, y)
# Predict scores based on hours studied
y_pred = model.predict(X)

# Plot actual vs predicted
plt.scatter(X, y, color='blue', label='Actual')
plt.plot(X, y_pred, color='red', label='Predicted')
plt.title('Regression Line')
plt.xlabel('Hours Studied')
plt.ylabel('Scores')
plt.legend()
plt.show()
mse = mean_squared_error(y, y_pred)
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Model Coefficient (slope): {model.coef_[0]:.2f}")
print(f"Model Intercept: {model.intercept_:.2f}")
# Example: Predict score for a student who studied 7.5 hours
hours = np.array([[7.5]])
predicted_score = model.predict(hours)
print(f"Predicted Score for 7.5 study hours: {predicted_score[0]:.2f}")
